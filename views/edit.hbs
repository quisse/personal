{{#section 'head'}}
    <link rel="stylesheet" type="text/css" href="/stylesheets/content-tools.min.css">
{{/section}}
<a href="/admin">back</a>
<div data-editable data-name="content">
    {{#unless content }}
        <p>this is the intro paragraph</p>
    {{/unless}}
    {{{content}}}
</div>
<a href="/admin">back</a>
{{#section 'foot'}}
    <script src="/javascripts/content-tools.js"></script>
    <script>
        var ImageUploader;

        ImageUploader = (function () {
            var image, xhr, xhrComplete, xhrProgress;
            var target = window.location.href + '/img';

            function ImageUploader(dialog) {
                this._dialog = dialog;
                this._dialog.bind('cancel', (function (_this) {
                    return function () {
                        return _this._onCancel();
                    };
                })(this));
                this._dialog.bind('imageUploader.cancelUpload', (function (_this) {
                    return function () {
                        return _this._onCancelUpload();
                    };
                })(this));
                this._dialog.bind('imageUploader.clear', (function (_this) {
                    return function () {
                        return _this._onClear();
                    };
                })(this));
                this._dialog.bind('imageUploader.fileReady', (function (_this) {
                    return function (files) {
                        return _this._onFileReady(files);
                    };
                })(this));
                this._dialog.bind('imageUploader.mount', (function (_this) {
                    return function () {
                        return _this._onMount();
                    };
                })(this));
                this._dialog.bind('imageUploader.rotateCCW', (function (_this) {
                    return function () {
                        return _this._onRotateCCW();
                    };
                })(this));
                this._dialog.bind('imageUploader.rotateCW', (function (_this) {
                    return function () {
                        return _this._onRotateCW();
                    };
                })(this));
                this._dialog.bind('imageUploader.save', (function (_this) {
                    return function () {
                        return _this._onSave();
                    };
                })(this));
                this._dialog.bind('imageUploader.unmount', (function (_this) {
                    return function () {
                        return _this._onUnmount();
                    };
                })(this));
            }

            ImageUploader.prototype._onCancel = function () {
            };

            ImageUploader.prototype._onCancelUpload = function () {
                clearTimeout(this._uploadingTimeout);
                // Cancel the current upload

                // Stop the upload
                if (xhr) {
                    xhr.upload.removeEventListener('progress', xhrProgress);
                    xhr.removeEventListener('readystatechange', xhrComplete);
                    xhr.abort();
                }

                return this._dialog.state('empty');
            };

            ImageUploader.prototype._onClear = function () {
                image = null;
                return this._dialog.clear();
            };

            ImageUploader.prototype._onFileReady = function (file) {
                var formData;
                console.log('dialog',this);
                var dialog = this._dialog;
                xhrProgress = function (ev) {
                    console.log(ev);
                    dialog.progress((ev.loaded / ev.total) * 100);
                };
                xhrComplete = function (ev) {
                    var response;
                    if (ev.target.readyState != 4) {
                        return;
                    }
                    xhr = null;
                    xhrProgress = null;
                    xhrComplete = null;
                    if (parseInt(ev.target.status) == 200) {
                        response = JSON.parse(ev.target.responseText);

                        image={
                            size:response.size,
                            url:response.url,
                        };
                        console.log(image);
                        dialog.populate(image.url, image.size);
                    } else {
                        new ContentTools.FlashUI('no');
                    }
                };
                this._dialog.state('uploading');
                this._dialog.progress(0);
                xhr = new XMLHttpRequest();

                formData = new FormData();
                formData.append('image', file);
                xhr.addEventListener('readystatechange', xhrComplete);
                console.log(this);
                console.log(ImageUploader);
                xhr.open('POST', target, true);
                xhr.send(formData);
            };

            ImageUploader.prototype._onMount = function () {
            };

            ImageUploader.prototype._onRotateCCW = function () {
                var clearBusy;
                this._dialog.busy(true);
                clearBusy = (function (_this) {
                    return function () {
                        return _this._dialog.busy(false);
                    };
                })(this);
                return setTimeout(clearBusy, 1500);
            };

            ImageUploader.prototype._onRotateCW = function () {
                var clearBusy;
                this._dialog.busy(true);
                clearBusy = (function (_this) {
                    return function () {
                        return _this._dialog.busy(false);
                    };
                })(this);
                return setTimeout(clearBusy, 1500);
            };

            ImageUploader.prototype._onSave = function () {
                var clearBusy;
                this._dialog.busy(true);
                clearBusy = (function (_this) {
                    return function () {
                        _this._dialog.busy(false);
                        return _this._dialog.save(image.url, image.size, {
                            alt: ''
                        });
                    };
                })(this);
                return setTimeout(clearBusy, 1500);
            };

            ImageUploader.prototype._onUnmount = function () {
            };

            ImageUploader.createImageUploader = function (dialog) {
                return new ImageUploader(dialog);
            };

            return ImageUploader;

        })();

        window.ImageUploader = ImageUploader;
        window.addEventListener('load', function () {
            var editor, req;
            ContentTools.IMAGE_UPLOADER = ImageUploader.createImageUploader;
            ContentTools.StylePalette.add([new ContentTools.Style('By-line', 'article__by-line', ['p']), new ContentTools.Style('Caption', 'article__caption', ['p']), new ContentTools.Style('Example', 'example', ['pre']), new ContentTools.Style('Example + Good', 'example--good', ['pre']), new ContentTools.Style('Example + Bad', 'example--bad', ['pre'])]);
            editor = ContentTools.EditorApp.get();
            editor.init('*[data-editable]', 'data-name');
            editor.bind('save', function (regions) {
                var name, payload, xhr;

                // Set the editor as busy while we save our changes
                this.busy(true);

                // Collect the contents of each region into a FormData instance
                payload = new FormData();
                for (name in regions) {
                    if (regions.hasOwnProperty(name)) {
                        payload.append(name, regions[name]);
                    }
                }
                console.log(payload);

                // Send the update content to the server to be saved
                function onStateChange(ev) {
                    // Check if the request is finished
                    if (ev.target.readyState == 4) {
                        editor.busy(false);
                        if (ev.target.status == '200') {
                            // Save was successful, notify the user with a flash
                            new ContentTools.FlashUI('ok');
                        } else {
                            // Save failed, notify the user with a flash
                            new ContentTools.FlashUI('no');
                        }
                    }
                };
                xhr = new XMLHttpRequest();
                xhr.addEventListener('readystatechange', onStateChange);
                xhr.open('POST', window.location.pathname);
                xhr.send(payload);
            });
        });
    </script>
{{/section}}